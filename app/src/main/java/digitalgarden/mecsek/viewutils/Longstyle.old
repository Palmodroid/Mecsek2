package digitalgarden.mecsek.viewutils;

import android.content.Context;

/**
 * 4TH IDEA:
 *
 * Separated instance cache (for cacheIndex 0)
 * AND seperated database cache (for all other indexes) are needed
 * So it is better to turn back to LongsytleAdapter SINGELTON pattern :)
 * OR:
 * Separated "static" variables should be used for cache and "instance" variables for instance-cache
 *
 * 3RD IDEA Longstyle:
 * Longstyle stores color data to show sqlite records.
 * It stores mixed data for text (ink color, bold and italics) and for background (paper color),
 * that means it cannot be derived from Paint classes. (And lot of other attributes are missing from compoundStyle)
 *
 * Longstyle <= 0 - not defined style
 * Longstyle 1-256 - indexed style
 * The styles are stored by sqlite in COLOR_DEFS table. Because Longstyle class caches sqlite,
 * COLOR_DEFS table should not be accessed and changed outside Longstyle!
 * Longstyle with (above) COMPOUND_MASK - complex style, containing all info without storing them.
 *
 * Changing (indexed) compoundStyle means, that sqlite data will store the changed data!!
 *
 * How to use compoundStyle?
 *
 * Longstyle is just a "store" for style data. Most View uses Paint to define these styles.
 * Paint parameters should be overwritten before onDraw.
 * It is a good idea to perform overwrite INSIDE onDraw, because it will reflect changes immediately.
 *
 * 2ND IDEA
 * Instance is needed, because styles are stored within these instances.
 * In this case it is better to get context by constructor.
 * Then no singleton, but static puffer array can strore already pulled colors.
 *
 * 1ST IDEA
 * Longstyle uses SINGLETON pattern - because it needs context through its getInstence method()
 * https://stackoverflow.com/questions/519520/difference-between-static-class-and-singleton-pattern
 * https://www.fwd.cloud/commit/post/android-context-on-demand/
 *
 * Colors/Styles could be stored as part of the database record - but in this case standalone colors couldn't be used.
 * SharedPreferences are not easy for arrays (no standard method to store them, and export/import is not implemented.
 * So, a separate database table is used to store these data. Export and import are implemented, as for the other parts.
 * Read data from UI thread is allowed (this is just 256 records, and all records are not read at once)
 * Loader could used, but program should start only after retrieving data. (Like in permissions)
 * Other possibility: WAIT screen hiding the whole surface, and making it GONE when loader is finished.
 */
public class Longstyleold
    {
    /* Java long is 64 bit / 8 byte
     * Ts ss PP PP  PP II II II
     *                 Ink color as RR GG BB (AA is always 0xFF)
     *       Paper color as RR GG BB (AA is always 0xFF)
     *  Size not implemented yet
     * Type as: (Signed - not used)
     * (sign) Compound - -   - - Bold  Italics
     *         (40...            02... 01.... hex)
     * COMPOUND BIT - should be the highest bit ! to check compound styles as >= COMPOUND_MASK
     * 0 (or negat√≠ve) : not defined style
     * 1-256 (or < COMPOUND_MASK) : indexed style
     */

    public static final long COMPOUND_MASK =    0x4000000000000000L;

    public static final long BOLD_MASK =       0x0200000000000000L;
    public static final long ITALICS_MASK =    0x0100000000000000L;

    private Context context; // to use database

    public static final int DEFAULT_INK_COLOR = 0xFF000000;    // Solid balck
    public static final int DEFAULT_PAPER_COLOR = 0x00FFFFFF;  // Transparent white
    public static final boolean DEFAULT_BOLD_TEXT = false;
    public static final boolean DEFAULT_ITALICS_TEXT = false;

    // 0 - <MAX_INDEX : indexed color (even if not defined yet)
    // -1             : not indexed color
    private int cacheIndex;

    // Cache for this instance - used if cacheIndex is -1
    private long compoundStyle;
    private int inkColor;
    private int paperColor;
    private boolean boldText;
    private boolean italicsText;


    public Longstyleold(Context context )
        {
        this( context, 0L );
        }

    public Longstyleold(Context context, long longstyle )
        {
        this.context = context.getApplicationContext(); // Context is needed by database queries
        set( longstyle );
        }

    /**
     * Sets compoundStyle from long parameter
     * >= COMPOUND_MASK : compound data, derived from long
     * 1 - < MAX_INDEX : indexed (pullStyle pulls it)
     * all others : not valid, returns predefined values
     */
    public void set( long longstyle )
        {
        // Compound style
        if ( longstyle >= COMPOUND_MASK )
            {
            cacheIndex = -1;

            compoundStyle = longstyle;
            inkColor = LongstyleIndexed.calcInkColor( longstyle );
            paperColor = LongstyleIndexed.calcPaperColor( longstyle );
            boldText = LongstyleIndexed.calcBoldText( longstyle );
            italicsText = LongstyleIndexed.calcItalicsText( longstyle );
            }
        // Indexed style
        else
            {
            // Valid index - data comes from LongstyleIndexed (even if not defined)
            cacheIndex = LongstyleIndexed.getInstance(context).checkIndex(longstyle);

            // Invalid indices - predefined values
            if (cacheIndex < 0)
                {
                compoundStyle = 0L; // not defined style
                inkColor = DEFAULT_INK_COLOR;
                paperColor = DEFAULT_PAPER_COLOR;
                boldText = DEFAULT_BOLD_TEXT;
                italicsText = DEFAULT_ITALICS_TEXT;
                }
            }
        }


    public void setPaperColor( int paperColor )
        {
        if ( cacheIndex < 0 )
            {
            this.paperColor = paperColor;
            set();
            }
        else
            {
            LongstyleIndexed.getInstance(context).setPaperColor( cacheIndex, paperColor );
            }
        }

    public void setInkColor( int inkColor )
        {
        if ( cacheIndex < 0 )
            {
            this.inkColor = inkColor;
            set();
            }
        else
            {
            LongstyleIndexed.getInstance(context).setInkColor( cacheIndex, inkColor );
            }
        }

    public void setBoldText( boolean boldText )
        {
        if ( cacheIndex < 0 )
            {
            this.boldText = boldText;
            set();
            }
        else
            {
            LongstyleIndexed.getInstance(context).setBoldText( cacheIndex, boldText );
            }
        }

    public void setItalicsText( boolean italicsText )
        {
        if ( cacheIndex < 0 )
            {
            this.italicsText = italicsText;
            set();
            }
        else
            {
            LongstyleIndexed.getInstance(context).setItalicsText( cacheIndex, italicsText );
            }
        }

    /**
     * Set all parameters, clearing cacheIndex (seting it to 0)
     * @param inkColor
     * @param paperColor
     * @param boldText
     * @param italicsText
     */
    public void setNotIndexedColor( int inkColor, int paperColor, boolean boldText, boolean italicsText )
        {
        cacheIndex = -1;
        set( inkColor, paperColor, boldText, italicsText );
        }

    /**
     * Sets style parameters - retaining cacheIndex
     * If it is an indexed style, than corresponding database compoundStyle will be updated
     * @param inkColor
     * @param paperColor
     * @param boldText
     * @param italicsText
     */
    public void set( int inkColor, int paperColor, boolean boldText, boolean italicsText )
        {
        if ( cacheIndex < 0 )
            {
            this.inkColor = inkColor;
            this.paperColor = paperColor;
            this.boldText = boldText;
            this.italicsText = italicsText;
            set();
            }
        else
            {
            LongstyleIndexed.getInstance(context).set( cacheIndex, inkColor, paperColor, boldText, italicsText );
            }
        }

    /**
     * Generates compoundStyle from parameters, and stores it
     * in cache[cacheIndex]
     * and in database, too
     */
    private void set()
        {
        compoundStyle = LongstyleIndexed.calcLongstyle(
                inkColor,
                paperColor,
                boldText,
                italicsText);
        }


    public long get()
        {
        return (cacheIndex < 0) ?
                compoundStyle :
                LongstyleIndexed.getInstance(context).get( cacheIndex );
        }

    public int getInkColor()
        {
        return (cacheIndex < 0) ?
                inkColor :
                LongstyleIndexed.getInstance(context).getInkColor( cacheIndex );
        }

    public int getPaperColor()
        {
        return (cacheIndex < 0) ?
                paperColor :
                LongstyleIndexed.getInstance(context).getPaperColor( cacheIndex );
        }

    public boolean isBoldText()
        {
        return (cacheIndex < 0) ?
                boldText :
                LongstyleIndexed.getInstance(context).isBoldText( cacheIndex );
        }

    public boolean isItalicsText()
        {
        return (cacheIndex < 0) ?
                italicsText :
                LongstyleIndexed.getInstance(context).isItalicsText( cacheIndex );
        }

    }
